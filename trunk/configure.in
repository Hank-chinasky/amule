# Process this file with autoconf to produce a configure script.
AC_INIT([aMule],[CVS],[deltahf@amule.org])
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE

AC_CONFIG_SRCDIR([src/SharedFileList.h])
AM_CONFIG_HEADER([config.h])
AM_MAINTAINER_MODE

# No -O2 by default, removing -fomit since it causes problems
CFLAGS=" ${CFLAGS/-fomit-frame-pointer/}"
CXXFLAGS=" ${CXXFLAGS/-fomit-frame-pointer/}"

# System detection, need AC_CANONICAL_TARGET
case "${target_os}" in
"")
	SYS=unknown
	;;
darwin*)
	SYS=darwin
	CFLAGS="${CFLAGS} -no-cpp-precomp -D_INTL_REDIRECT_MACROS -DNOPCH";
	LDFLAGS="$LDFLAGS -bind_at_load"
	USE_GSOCKET="no"
	USE_USS="no"
	;;
openbsd*) 
	SYS=openbsd
	LIBS="$LIBS -L/usr/local/lib -lX11 -L/usr/X11R6/lib"  
	CXXFLAGS=" $CXXFLAGS -D__OPENBSD__"
	if test "$DEBUG_FLAGS" != ""; then
		DEBUG_FLAGS="-Wall -g -fno-inline -D__DEBUG__"
	fi
	;;
*cygwin* | *mingw32*)
	SYS=win32
	AC_MSG_ERROR([
		"You are trying to compile aMule using configure under Windows.
		This is not possible. Please use the provided MakefineWIN32 instead.
		Just type make -f MakefileWIN32.
	])
	;;
esac

# Checks for programs.
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_CC
AC_PROG_CPP
AC_PROG_MAKE_SET
AC_PROG_INSTALL

# Find the right ranlib, even when cross-compiling
# And for some other tools for cross compilation
AC_CHECK_TOOL(RANLIB, ranlib)
AC_CHECK_TOOL(STRIP, strip)
AC_CHECK_TOOL(AR, ar)
AC_CHECK_TOOL(LD, ld)

# Add args to configure
AC_ARG_ENABLE(debug,   [  --enable-debug          Enable additional debugging output],
              USE_DEBUG="$enableval", USE_DEBUG="no")

AC_ARG_ENABLE(debug,   [  --disable-debug         Disable additional debugging output],
              USE_DEBUG="$enableval", USE_DEBUG="yes")

AC_ARG_ENABLE(optimise,[  --enable-optimise       Enable code optimizing],
		USE_OPTIMIZE="$enableval", USE_OPTIMIZE="no")

# WARNING: setting last param to default USE_OPTIMIZE value WILL MAKE DEPRECATED --enable-optimise STOP WORKING!!
AC_ARG_ENABLE(optimize,[  --enable-optimize       Enable code optimizing],
		USE_OPTIMIZE="$enableval", )

AC_ARG_ENABLE(profile, [  --enable-profile        Enable code profiling],
		USE_PROFILE="$enableval", USE_PROFILE="no")

AC_ARG_ENABLE(static,  [  --enable-static         Produce a statically linked executable],
              USE_DEBUG_STATIC="$enableval", USE_DEBUG_STATIC="no")
	      
AC_ARG_ENABLE(embedded_crypto,[  --enable-embedded_crypto    Use embedded Crypto code (default)],
		USE_EMBEDDED_CRYPTO="$enableval", USE_EMBEDDED_CRYPTO="yes")
	      
AC_ARG_ENABLE(amulecmd,  [  --enable-amulecmd       Compile aMule command line client],
              BUILDAMULECMD="$enableval", BUILDAMULECMD="no")

AC_ARG_ENABLE(amulecmdgui,  [  --enable-amulecmdgui    Compile aMule GUI client],
             GUI="$enableval", GUI="no")

AC_ARG_ENABLE(amule-gui,  [  --enable-amule-gui    Compile aMule remote GUI > WARNING - don't use it. It DOESN'T work yet! <],
             AMULE_GUI="$enableval", AMULE_GUI="no")

AC_ARG_ENABLE(amule-daemon,  [  --enable-amule-daemon    Compile aMule daemon version],
             AMULE_DAEMON="$enableval", AMULE_DAEMON="no")

AC_ARG_ENABLE(webserver,  [  --enable-webserver      Compile aMule WebServer],
              WEB="$enableval", WEB="no")

AC_ARG_ENABLE(webservergui,  [  --enable-webservergui   Compile aMule WebServer GUI],
              WEBGUI="$enableval", WEBGUI="no")

AC_ARG_ENABLE(cas,  [  --disable-cas           Don't compile C aMule Statistics],
              CAS="$enableval", CAS="yes")

AC_ARG_ENABLE(wxcas,  [  --disable-wxcas         Don't compile aMule GUI Statistics],
              WXCAS="$enableval", WXCAS="yes")

AC_ARG_ENABLE(ed2k,  [  --disable-ed2k          Don't compile aMule ed2k links handler],
              ED2K="$enableval", ED2K="yes")

AC_ARG_ENABLE(alc,  [  --disable-alc           Don't compile aMuleLinkCreator GUI version],
              ALC="$enableval", ALC="yes")
	      
AC_ARG_ENABLE(alcc,  [  --disable-alcc          Don't compile aMuleLinkCreator for console],
              ALCC="$enableval", ALCC="yes")

AC_ARG_ENABLE(gsocket, [  --disable-gsocket       Disable gsocket.c linking],
		USE_GSOCKET="$enableval", USE_GSOCKET="yes")

AC_ARG_ENABLE(gtk, [  --disable-gtk           Disable pure GTK code in amule], gtk="$enableval", gtk="yes")

AC_ARG_ENABLE(utf8_systray, [  --enable-utf8-systray   Use UTF-8 encoded strings in the systray],
		utf8_systray="$enableval", utf8_systray="no")

AC_ARG_ENABLE(systray, [  --disable-systray       Disable SysTray compilation],
			systray="$enableval", systray="yes")

AC_ARG_ENABLE(uss, [  --enable-uss            Enable USS (not working atm)],
		USE_USS="$enableval", USE_USS="no")
		
AC_ARG_ENABLE([verbose],
	AC_HELP_STRING([--enable-verbose],[Enable verbose debug output]),
	[VERBOSE_OUTPUT="$enableval"], [VERBOSE_OUTPUT="no"])

# Checking for libs before all other stuff to break
# configure as soon as possible in case of a missing one
# to avoid losing to much time

# Checks for gettext.
AM_GNU_GETTEXT
AM_GNU_GETTEXT_VERSION(0.11.5)

# Check for zlib
CHECK_ZLIB

# Checks for Curl
AM_OPTIONS_CURLCONFIG

AM_PATH_CURLCONFIG(7.9.5,CURLFOUND=1)

if test "$CURLFOUND" != 1; then
    AC_MSG_ERROR([
	WARNING: curl >= 7.9.5 is not found.
	Please check that curl-config is in your default path, check out
        LD_LIBRARY_PATH or equivalent variable.
	Or this might also be that your curl-config has other name.
	Please try again with --with-curl-config=/usr/bin/curl-config
	(replace /usr/bin/curl-config with a valid path to your curl-config).
	If you use compiled packages check if you have devel pack installed.
	To download the lastest version check http://curl.haxx.se/download.html for sources.
    ])
fi

# Check for gd
AM_OPTIONS_GDLIBCONFIG

AM_PATH_GDLIBCONFIG(2.0.0,GDLIBFOUND=1)

case "$GDLIBFOUND" in
1)	CAS_DEFS="-D__GD__"
	GDLIB_LIBS="$GDLIB_LIBS -lgd"
	;;
*)AC_MSG_NOTICE([
	WARNING: gd-lib >= 2.0.0 not found.
	gd-lib is needed for fully funtional cas. If you don't have gd-lib,
	cas will be compiled, but you won't be able to create that cool
	status image (text mode however will work). Also note that you should
	upgrade to gd-lib >= 2.0.22 if you intend to use it, other versions have 	not been tested and therefore are unsupported at the moment.
	Please check that gdlib-config is in your default path, check out
	LD_LIBRARY_PATH or equivalent variable.
	Or this might also be that your gdlib-config has other name.
	Please try again with --with-gdlib-config=/usr/bin/gdlib-config
        (replace /usr/bin/gdlib-config with a valid path to your gdlib-config).
        If you use compiled packages check if you have devel pack installed.
        To download the lastest version check http://www.boutell.com/gd
	for sources.
        ])
	
	CAS_DEFS=""
	GDLIB_LIBS=""
	GDLIB_CFLAGS=""
	GDLIB_LDFLAGS=""
	;;
esac

AC_SUBST(CAS_DEFS)

# Check for wx
AM_OPTIONS_WXCONFIG
AM_OPTIONS_WXBASECONFIG

AM_PATH_WXCONFIG(2.4.2)

CHECK_WX_BUILT_WITH_GTK2

if test x"$GTK_USEDVERSION" = x"2" ; then
  AM_PATH_GTK_2_0(2.0.3, havegtk2=yes, havegtk2=no)
  GTK_DEFS="-D__GTK2__"
  GET_GTK2_VERSION
else
  AM_PATH_GTK(1.2.0, havegtk=yes, havegtk=no)
  GTK_DEFS=""
  GET_GTK_VERSION
fi

CHECK_WX_PARTIAL_VERSION

if test x"$WX_PARTIAL_VERSION" = x"5"; then
  WX_VERSION="2_5"
else
  WX_VERSION="any"
fi

GET_WXGTK_VERSION

# Check for Crypto++
AM_OPTIONS_CRYPTO

CHECK_CRYPTO(5.1)

case "$CRYPTO_PP_STYLE" in
 
 gentoo_debian) CXXFLAGS="$CXXFLAGS -I$crypto_prefix/include -D__CRYPTO_DEBIAN_GENTOO__"
                # Debian uses libcrypto++5.1 - it's not my fault, please soda patch the package
                LDFLAGS="$LDFLAGS -L$crypto_prefix/lib"
		CRYPTOLIBS="-lcrypto++"
 ;;
 mdk_suse_fc) CXXFLAGS="$CXXFLAGS -I$crypto_prefix/include -D__CRYPTO_MDK_SUSE_FC__"
              LDFLAGS="$LDFLAGS -L$crypto_prefix/lib"
	      CRYPTOLIBS="-lcryptopp"
 ;;
 sources) CXXFLAGS="$CXXFLAGS -I$crypto_prefix -D__CRYPTO_SOURCE__"
	  LDFLAGS="$LDFLAGS -L$crypto_prefix"
          CRYPTOLIBS="-lcryptopp"
 ;;
 embeded) CXXFLAGS="$CXXFLAGS -DUSE_EMBEDDED_CRYPTO"
 ;;
 *) AC_MSG_ERROR([
          WARNING: crypto++ >= $min_crypto_version is not found.
          Please check that cryptopp-headers are in your default include path,
	  check out LD_LIBRARY_PATH or equivalent variable.
          Or this might also be that your cryptopp is instaled on other path.
          Please try again with --with-crypto-prefix=/my_crypto_prefix
          (replace /my_crypto_prefix with a valid path to your crypto directory).
          The crypto include folder must be named cryptopp or crypto++. 
	  Sorry about the mess but it's the only way because libcrypto has no make install.
          To download the lastest version check http://www.cryptopp.com for sources.
	  ])
 ;;
esac

AC_SUBST(CRYPTOLIBS)

# Ok, we have all needed libs, now checking for other stuff

# Flush standard test results for speeding cache
AC_CACHE_SAVE

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

# Flush standard test results for speeding cache
AC_CACHE_SAVE

# Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_MEMCMP
AC_FUNC_MKTIME
AC_TYPE_SIGNAL
AC_FUNC_STAT
AC_FUNC_STRFTIME
AC_CHECK_FUNCS([floor ftruncate gettimeofday inet_ntoa memchr memmove memset mkdir select setlocale sqrt strcasecmp strchr strdup strrchr strstr strtoul getrlimit setrlimit])

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([arpa/inet.h fcntl.h locale.h netdb.h netinet/in.h sys/socket.h sys/time.h sys/timeb.h sys/resource.h])

# Flush standard test results for speeding cache
AC_CACHE_SAVE

# aMule options

# systray disable
AC_MSG_CHECKING([whether SysTray should be compiled])
AC_MSG_RESULT($systray)

case "$systray" in
no) TRAY_FLAGS="-D__SYSTRAY_DISABLED__"
     USE_SAFE_TRAY="no"
     ;;
esac

AC_SUBST(TRAY_FLAGS)

# utf8_systray enable
AC_MSG_CHECKING([whether SysTray should use UTF-8 strings])
AC_MSG_RESULT($utf8_systray)

case "$utf8_systray" in
yes)
	if test x"$systray" = xyes; then
		UTF8_SYSTRAY_FLAGS="-D__UTF8_SYSTRAY_ENABLED__"
		USE_UTF8_SYSTRAY="yes"
	else
		echo "***** Warning if you want to enable UTF-8 systray, --enable-systray must be active"
		utf8_systray="no"		
	fi
	;;
esac

AC_SUBST(UTF8_SYSTRAY_FLAGS)

# gtk code strip
AC_MSG_CHECKING([whether pure GTK code should be compiled])
AC_MSG_RESULT($gtk)

case "$gtk" in
no) GTK_DEFS="$GTK_DEFS -D__NOGTK__"
	;;
esac

AC_SUBST(GTK_DEFS)

# Other tests

case "$USE_DEBUG" in
yes)	DEBUG_FLAGS="-W -Wall -g -ggdb -fno-inline -D__DEBUG__ -fmessage-length=0"
    ;;
*)	DEBUG_FLAGS=""
    ;;
esac

# gsocket stuff
case "$WXGTK_VERSION" in
2.4.2)
	USE_24GSOCKET="yes"
	if test x$AMULE_DAEMON = xyes; then
	 AC_MSG_NOTICE([WARNING: aMuled cannot be used with wxWidgets-2.4: disabling it])
	fi
	AMULE_DAEMON="no"
	;;
2.5.1 | 2.5.2)
	USE_24GSOCKET="no"
	;;
*)
	USE_GSOCKET="no"
	USE_24GSOCKET="no"
	;;
esac

# Command line tools
case "$BUILDAMULECMD" in
yes)	BUILD_AMULECMD="yes"
	;;
*)	BUILD_AMULECMD="no"
	;;
esac


case "$WXBASE24FOUND" in
1)	HAVE_AMULECMD="yes"
	WXBASE_CFLAGS="$WXBASE_CFLAGS -DwxUSE_GUI=0"
	WXBASE_CXXFLAGS="$WXBASE_CXXFLAGS -DwxUSE_GUI=0"
	;;
*)	if test "$WXBASE25FOUND" = 1; then
		HAVE_AMULECMD="yes"
		WXBASE_CFLAGS="$WXBASE_CFLAGS -DwxUSE_GUI=0"
		WXBASE_CXXFLAGS="$WXBASE_CXXFLAGS -DwxUSE_GUI=0"
	else
		WEB="no"
		WEBGUI="no"
		ALCC="no"
		HAVE_AMULECMD="no"
	fi
	;;
esac

# Optimization
case "$USE_OPTIMIZE" in

yes)	OPTIMISE_FLAGS="-O2"
	;;
*)	OPTIMISE_FLAGS=""
	;;
esac

# Profiling
case "$USE_PROFILE" in
yes)	PROFILE_FLAGS="-pg"
	;;
*)	PROFILE_FLAGS=""
	;;
esac

case "$USE_DEBUG_STATIC" in
yes)	LDFLAGS="$LDFLAGS -static"
	WX_LIBS="$WX_LIBS `gtk-config --libs` -lgthread"
	;;
esac

case "$DISABLE_PROGRESS" in
yes)     AC_DEFINE_UNQUOTED(DISABLE_PROGRESS, 1,
      [Define if progress bar drawing should be disabled.])
  ;;
esac

case "$VERBOSE_OUTPUT" in
yes)	if test x"$USE_DEBUG" = xno ; then
		VERBOSE_OUTPUT=no
		AC_MSG_NOTICE([
	WARNING: --enable-verbose is void with --disable-debug.
	Ignoring verbose option.
	])
	else
		CXXFLAGS="$CXXFLAGS -D__VERBOSE_OUTPUT__";
	fi
	;;
esac

AC_DEFINE_UNQUOTED(LOCALEDIR, "`eval echo $datadir/locale`", [Define where the locales are.])
# we have it anyway by now

XRCFLAGS="-Isrc"
CXXFLAGS="$CXXFLAGS $DEBUG_FLAGS $OPTIMISE_FLAGS $PROFILE_FLAGS"
CFLAGS="$CFLAGS $DEBUG_FLAGS $OPTIMISE_FLAGS $PROFILE_FLAGS"

dnl -lpthread is needed by Debian
LDFLAGS="$LDFLAGS $PROFILE_FLAGS -lpthread"
AM_CONDITIONAL(USE_EMBEDDED_CRYPTO, test x$USE_EMBEDDED_CRYPTO = xyes)
AM_CONDITIONAL(WEB, test x$WEB = xyes)
AM_CONDITIONAL(ED2K, test x$ED2K = xyes)
AM_CONDITIONAL(CAS, test x$CAS = xyes)
AM_CONDITIONAL(WXCAS, test x$WXCAS = xyes)
AM_CONDITIONAL(ALC, test x$ALC = xyes)
AM_CONDITIONAL(ALCC, test x$ALCC = xyes)
AM_CONDITIONAL(GUI, test x$GUI = xyes)
AM_CONDITIONAL(AMULE_GUI, test x$AMULE_GUI = xyes)
AM_CONDITIONAL(AMULE_DAEMON, test x$AMULE_DAEMON = xyes)
AM_CONDITIONAL(WEBGUI, test x$WEBGUI = xyes)
AM_CONDITIONAL(COMPILE_CMD, test x$BUILD_AMULECMD = xyes)
AM_CONDITIONAL(HAVE_WXBASE, test x$HAVE_AMULECMD = xyes)
AM_CONDITIONAL(ADD_24GSOCKET, test x$USE_24GSOCKET = xyes)
AM_CONDITIONAL(ADD_GSOCKET, test x$USE_GSOCKET = xyes)
AM_CONDITIONAL(ADD_THROTTLER, test x$USE_USS = xyes)
AM_CONDITIONAL(HAVE_TRAY, test x$systray = xyes)
AM_CONDITIONAL(HAVE_UTF8_TRAY, test x$utf8_systray = xyes)
AM_CONDITIONAL(HAVE_GTK, test x$gtk = xyes)
AM_CONDITIONAL(VERBOSE_OUTPUT, test x$USE_DEBUG = xyes -a x$VERBOSE_OUTPUT = xyes)

dnl
dnl Check for readline library
dnl
VL_LIB_READLINE

# DO NOT MOVE UP...THAT'S A REASON TO BE HERE!!

AM_OPTIONS_CCACHE_PFX

AC_MSG_CHECKING([whether ccache support should be added])
AC_ARG_ENABLE(ccache, [  --enable-ccache         Enable ccache support for fast recompilation],
		ccache="$enableval", ccache="no")
AC_MSG_RESULT($ccache)
AC_SUBST(ccache)

case "$ccache" in

yes)
	CHECK_CCACHE
	if [[ $CCACHE = 0 ]]; then
	GCC="$ccache_prefix/ccache $GCC"
	CC="$ccache_prefix/ccache $CC"
	GXX="$ccache_prefix/ccache $GXX"
	CXX="$ccache_prefix/ccache $CXX"
	else
	GCC="$GCC"
	CC="$CC"
	GXX="$GXX"
	CXX="$CXX"
	fi
	;;
*)      GCC="$GCC"
	CC="$CC"
	GXX="$GXX"
	CXX="$CXX"
esac

dnl
dnl Generate the Makefiles
dnl
AC_CONFIG_FILES([src/Makefile src/pixmaps/Makefile src/utils/Makefile src/utils/aLinkCreator/Makefile src/utils/aLinkCreator/src/Makefile src/utils/cas/Makefile src/utils/wxCas/Makefile src/utils/wxCas/src/Makefile src/utils/xas/Makefile src/webserver/Makefile src/kademlia/Makefile src/kademlia/utils/Makefile intl/Makefile po/Makefile.in m4/Makefile docs/Makefile Makefile Compilation.flags])
AC_OUTPUT

echo
echo
echo "  Configure script has finished system check."
echo
echo "  Configured aMule ${PACKAGE_VERSION} for '${host}'."
echo
echo "  aMule enabled options:"
echo 
echo "  **** aMule Core ****" 
echo "  Should aMule be compiled in debug mode?                  ${USE_DEBUG:-no}"
echo "  Should aMule be compiled with verbose console output?    ${VERBOSE_OUTPUT:-no}"
echo "  Should aMule be compiled with upload speed sense?        ${USE_USS:-no}"
echo "  Should aMule be compiled with profiling?                 ${USE_PROFILE:-no}"
echo "  Should aMule be compiled with optimizations?             ${USE_OPTIMIZE:-no}"
echo "  Should aMule be compiled with systray?                   ${systray}"
echo "  Should aMule be compiled with UTF-8 systray?             ${utf8_systray}"
echo "  Should aMule be compiled with pure GTK code?             ${gtk}"
echo "  Should aMule be linked against patched gsocket?          ${USE_GSOCKET:-no}"
echo "  Should aMule daemon version be built? (EXPERIMENTAL)     ${AMULE_DAEMON:-no}"
echo "  Should aMule remote gui be built? (EXPERIMENTAL)         ${AMULE_GUI:-no}"
echo "  Crypto++ library/headers style?                          ${CRYPTO_PP_STYLE}"

echo
echo "  **** aMule TextClient ****"
case "$BUILDAMULECMD" in
yes)	echo "  Should amulecmd (TextClient) be linked against wxbase?   ${HAVE_AMULECMD:-no}"
	;;
esac
echo "  Should aMule Command Line Client be built?               ${BUILD_AMULECMD:-no}"
echo "  Should aMule GUI Client be built?                        ${GUI:-no}"
echo
echo "  **** aMule WebServer ****"
echo "  Should aMule WebServer be built?                         ${WEB:-no}"
echo "  Should aMule WebServer GUI be built?                     ${WEBGUI:-no}"
echo
echo "  **** aMule ED2K Links Handler ****"
echo "  Should aMule ED2K Links Handler be built?                ${ED2K:-no}"
echo
echo "  **** aMuleLinkCreator ****"
echo "  Should aMuleLinkCreator GUI version (alc) be built?      ${ALC:-no}"
echo "  Should aMuleLinkCreator for console (alcc) be built?     ${ALCC:-no}"
echo
echo "  **** aMule Statistics ****"
echo "  Should C aMule Statistics (CAS) be built?                ${CAS:-no}"
echo "  Should aMule GUI Statistics (wxCas) be built?            ${WXCAS:-no}"

echo
echo "  **** General Libraries and Tools ****"
echo "  Should ccache support be enabled?                        ${ccache:-no}"
echo "  Libraries aMule will use to build:"
echo "                                       wxWidgets          ${WXGTK_VERSION:-Not detected}"
echo "                                       GTK                ${GTK_VERSION:-Not detected}"

if test x"$WX_VERSION" = x"any" ; then
echo
echo "  NOTICE: With wxWidgets versions prior 2.5, you need wxBase library to compile:"
echo "          amuleweb amulecmd and alcc"
fi
echo

if test x"$GTK_USEDVERSION" = x"2" && test x"$WX_VERSION" = x"any" ; then
echo
echo
echo "  WARNING!! Your wxWidgets copy has been linked against GTK2 and this will make aMule"
echo "  be unstable, use much more cpu and ram. You have been warned, don't report bugs under this setup."
fi
echo
